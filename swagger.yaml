openapi: 3.0.0
info:
  title: Event Booking System API
  version: 1.0.0
  description: API endpoints for the Event Booking System documented with Swagger
  contact:
    name: Desmond Obisi
    email: info@miniblog.com
    url: https://github.com/DesmondSanctity/node-js-swagger

servers:
  - url: http://localhost:8080/
    description: Local server

paths:
  /register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: User registered
        '400':
          description: User already exists

  /login:
    post:
      summary: Log in a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  /events:
    get:
      summary: Get all events
      tags: [Event]
      responses:
        '200':
          description: A list of events

    post:
      summary: Create a new event (admin only)
      tags: [Event]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '201':
          description: Event created
        '400':
          description: Event creation failed

  /events/{id}:
    get:
      summary: Get a specific event
      tags: [Event]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Event ID
      responses:
        '200':
          description: Event details
        '404':
          description: Event not found

    put:
      summary: Update an event (admin only)
      tags: [Event]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '200':
          description: Event updated
        '404':
          description: Event not found

    delete:
      summary: Delete an event (admin only)
      tags: [Event]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Event deleted
        '404':
          description: Event not found

  /bookings:
    get:
      summary: Get user's bookings
      tags: [Booking]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's bookings

  /bookings/{eventId}:
    post:
      summary: Book an event
      tags: [Booking]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
          required: true
          description: Event ID
      responses:
        '201':
          description: Booking successful
        '400':
          description: No available seats or event not found

  /bookings/{bookingId}:
    delete:
      summary: Cancel a booking
      tags: [Booking]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookingId
          schema:
            type: integer
          required: true
          description: Booking ID
      responses:
        '200':
          description: Booking cancelled
        '404':
          description: Booking not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterInput:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string

    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    EventInput:
      type: object
      required:
        - title
        - date
        - location
        - availableSeats
      properties:
        title:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time
        location:
          type: string
        availableSeats:
          type: integer
